# Copyright (c) 2025 xNetVN Inc.
# Website: https://xnetvn.com/
# License: Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0)
# Contact: license@xnetvn.net
#
# GitHub Actions CI/CD workflow for PHP project - xNetVN Inc.
#
# - Automatically run tests, lint, coverage, SAST, secret scan, dependency check.
# - Ensure compliance with DevSecOps, security, and code quality standards.

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/**, bugfix/**, hotfix/**, release/**]
  pull_request:
    branches: [main, develop]

jobs:
  build-test:
    name: Build, Lint, Test, Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xdebug
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --working-dir=libs

      - name: Run PHP Lint
        run: find app/ -name '*.php' -print0 | xargs -0 -n1 php -l

      - name: Run PHP_CodeSniffer
        run: |
          composer global require "squizlabs/php_codesniffer=*"
          ~/.composer/vendor/bin/phpcs --standard=PSR12 app/

      - name: Run PHPUnit (with coverage)
        run: |
          php libs/vendor/bin/phpunit --configuration phpunit.xml --coverage-text --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  static-analysis:
    name: Static Analysis (Psalm & PHPStan)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --working-dir=libs
      - name: Install Psalm & PHPStan
        run: |
          composer global require vimeo/psalm phpstan/phpstan
      - name: Run Psalm
        run: ~/.composer/vendor/bin/psalm --no-cache --output-format=github --show-info=true app/
      - name: Run PHPStan
        run: ~/.composer/vendor/bin/phpstan analyse app/ --level=max --no-progress --error-format=github

  secrets-scan:
    name: Secret Scanning (truffleHog)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run truffleHog via Docker
        run: |
          docker run --rm -v "${{ github.workspace }}:/src" trufflesecurity/trufflehog:latest filesystem --fail --no-update --json --exclude-paths /src/.trufflehogignore /src

  dependency-scan:
    name: Dependency Vulnerability Scan (Snyk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check for composer.lock or composer.json
        id: check_composer
        run: |
          if [ -f "libs/composer.lock" ]; then
            echo "::set-output name=manifest::libs/composer.lock"
          elif [ -f "libs/composer.json" ]; then
            echo "::set-output name=manifest::libs/composer.json"
          else
            echo "::set-output name=manifest::"
          fi
      - name: Run Snyk to check for vulnerabilities
        if: steps.check_composer.outputs.manifest != ''
        uses: snyk/actions/php@master
        with:
          args: ${{ steps.check_composer.outputs.manifest }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# Dependabot sẽ được cấu hình riêng qua file dependabot.yml
